	eax=0x0 ecx=0x7FFFF3C edx=0x0 ebx=0x3903E esp=0x7FFFE98 ebp=0x7FFFE98 esi=0x22 edi=0x7FFFF78

[POP]
	eax=0x0 ecx=0x7FFFF3C edx=0x0 ebx=0x3903E esp=0x7FFFE98 ebp=0x7FFFE98 esi=0x22 edi=0x7FFFF78
	 current_top_of_stack_value=0x7FFFFC8
	eax=0x0 ecx=0x7FFFF3C edx=0x0 ebx=0x3903E esp=0x7FFFE9C ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78

[RET] current_eip=0x36BA8 new_cpu_eip=0x3202E
	eax=0x0 ecx=0x7FFFF3C edx=0x0 ebx=0x3903E esp=0x7FFFEA0 ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78
	 curr_stack_top_value=0x3D060

[TEST]
	eax=0xFFFFFFFF ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x3903E esp=0x7FFFEA0 ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78
	alu_and size=8
	eflags before [ZF   ]

[ADD] imm=0x11C -> old_reg=0x7FFFEA0 
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x3903E esp=0x7FFFEA0 ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x3903E esp=0x7FFFFBC ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78
	imm=0x11C -> new_reg=0x7FFFFBC ebp=0x7FFFFC8 esp=0x7FFFFBC 

[POP]
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x3903E esp=0x7FFFFBC ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78
	 current_top_of_stack_value=0x100
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFC0 ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78

[POP]
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFC0 ebp=0x7FFFFC8 esi=0x22 edi=0x7FFFF78
	 current_top_of_stack_value=0x3D060
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFC4 ebp=0x7FFFFC8 esi=0x3D060 edi=0x7FFFF78

[POP]
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFC4 ebp=0x7FFFFC8 esi=0x3D060 edi=0x7FFFF78
	 current_top_of_stack_value=0x0
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFC8 ebp=0x7FFFFC8 esi=0x3D060 edi=0x0

[POP]
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFC8 ebp=0x7FFFFC8 esi=0x3D060 edi=0x0
	 current_top_of_stack_value=0x7FFFF58
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFCC ebp=0x7FFFF58 esi=0x3D060 edi=0x0

[RET] current_eip=0x3204D new_cpu_eip=0x31DDA
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFD0 ebp=0x7FFFF58 esi=0x3D060 edi=0x0
	 curr_stack_top_value=0x3D060

[CMP_BV] eip=0x31DDA imm_val=0xFF reg_val=0x49
	eflags before [   ]
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFD0 ebp=0x7FFFF58 esi=0x3D060 edi=0x0
	eflags after [  CF ]

[TEST]
	eax=0x49 ecx=0x7FFFF3C edx=0x7FFFEE8 ebx=0x100 esp=0x7FFFFD0 ebp=0x7FFFF58 esi=0x3D060 edi=0x0
	alu_and size=32
	eflags before [   ]

[SUB]_before opr_src.val=0x80 opr_dest.val=0x7FFFFD0 opr_src.data_size=8 opr_dest.data_size=32
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x100 esp=0x7FFFFD0 ebp=0x7FFFF58 esi=0x3D060 edi=0x0
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x100 esp=0x8000050 ebp=0x7FFFF58 esi=0x3D060 edi=0x0
[SUB]_after opr_src.val=0x80 opr_dest.val=0x8000050 opr_src.data_size=8 opr_dest.data_size=32

[POP]
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x100 esp=0x8000050 ebp=0x7FFFF58 esi=0x3D060 edi=0x0
	 current_top_of_stack_value=0x0
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x0 esp=0x8000054 ebp=0x7FFFF58 esi=0x3D060 edi=0x0

[POP]
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x0 esp=0x8000054 ebp=0x7FFFF58 esi=0x3D060 edi=0x0
	 current_top_of_stack_value=0x0
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x0 esp=0x8000058 ebp=0x7FFFF58 esi=0x0 edi=0x0

[POP]
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x0 esp=0x8000058 ebp=0x7FFFF58 esi=0x0 edi=0x0
	 current_top_of_stack_value=0x0
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x0 esp=0x800005C ebp=0x0 esi=0x0 edi=0x0

[RET] current_eip=0x31DEF new_cpu_eip=0x0
	eax=0x49 ecx=0x7FFFF3C edx=0x31 ebx=0x0 esp=0x8000060 ebp=0x0 esi=0x0 edi=0x0
	 curr_stack_top_value=0x0
invalid opcode(eip = 0x00000000): 2c 83 f8 ff 7c 11 85 db ...

There are two cases which will trigger this unexpected exception:
1. The instruction at eip = 0x00000000 is not implemented.
2. Something is implemented incorrectly.
Find this eip value(0x00000000) in the disassembling result to distinguish which case it is.

[1;31mIf it is the first case, see
 _ ____   ___    __    __  __                         _ 
(_)___ \ / _ \  / /   |  \/  |                       | |
 _  __) | (_) |/ /_   | \  / | __ _ _ __  _   _  __ _| |
| ||__ < > _ <| '_ \  | |\/| |/ _` | '_ \| | | |/ _` | |
| |___) | (_) | (_) | | |  | | (_| | | | | |_| | (_| | |
|_|____/ \___/ \___/  |_|  |_|\__,_|_| |_|\__,_|\__,_|_|

for more details.

If it is the second case, remember:
* The machine is always right!
* Every line of untested code is always wrong![0m

make[1]: Leaving directory '/home/luchao/icspa-public'
